// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: systemd.proto

package external

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UnitFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *UnitFile) Reset() {
	*x = UnitFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitFile) ProtoMessage() {}

func (x *UnitFile) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitFile.ProtoReflect.Descriptor instead.
func (*UnitFile) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{0}
}

func (x *UnitFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UnitFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type UnitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LoadState   string `protobuf:"bytes,3,opt,name=loadState,proto3" json:"loadState,omitempty"`
	ActiveState string `protobuf:"bytes,4,opt,name=activeState,proto3" json:"activeState,omitempty"`
	SubState    string `protobuf:"bytes,5,opt,name=subState,proto3" json:"subState,omitempty"`
	Followed    string `protobuf:"bytes,6,opt,name=followed,proto3" json:"followed,omitempty"`
	Path        string `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
	JobId       int32  `protobuf:"varint,8,opt,name=jobId,proto3" json:"jobId,omitempty"`
	JobType     string `protobuf:"bytes,9,opt,name=jobType,proto3" json:"jobType,omitempty"`
	JobPath     string `protobuf:"bytes,10,opt,name=jobPath,proto3" json:"jobPath,omitempty"`
}

func (x *UnitStatus) Reset() {
	*x = UnitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitStatus) ProtoMessage() {}

func (x *UnitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitStatus.ProtoReflect.Descriptor instead.
func (*UnitStatus) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{1}
}

func (x *UnitStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnitStatus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UnitStatus) GetLoadState() string {
	if x != nil {
		return x.LoadState
	}
	return ""
}

func (x *UnitStatus) GetActiveState() string {
	if x != nil {
		return x.ActiveState
	}
	return ""
}

func (x *UnitStatus) GetSubState() string {
	if x != nil {
		return x.SubState
	}
	return ""
}

func (x *UnitStatus) GetFollowed() string {
	if x != nil {
		return x.Followed
	}
	return ""
}

func (x *UnitStatus) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UnitStatus) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *UnitStatus) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *UnitStatus) GetJobPath() string {
	if x != nil {
		return x.JobPath
	}
	return ""
}

type UnitFileChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Filename    string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *UnitFileChange) Reset() {
	*x = UnitFileChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitFileChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitFileChange) ProtoMessage() {}

func (x *UnitFileChange) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitFileChange.ProtoReflect.Descriptor instead.
func (*UnitFileChange) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{2}
}

func (x *UnitFileChange) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnitFileChange) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UnitFileChange) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type SystemdListUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemdListUnitsRequest) Reset() {
	*x = SystemdListUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdListUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdListUnitsRequest) ProtoMessage() {}

func (x *SystemdListUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdListUnitsRequest.ProtoReflect.Descriptor instead.
func (*SystemdListUnitsRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{3}
}

type SystemdListUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units []*UnitFile `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
}

func (x *SystemdListUnitsResponse) Reset() {
	*x = SystemdListUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdListUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdListUnitsResponse) ProtoMessage() {}

func (x *SystemdListUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdListUnitsResponse.ProtoReflect.Descriptor instead.
func (*SystemdListUnitsResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{4}
}

func (x *SystemdListUnitsResponse) GetUnits() []*UnitFile {
	if x != nil {
		return x.Units
	}
	return nil
}

type SystemdStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName string `protobuf:"bytes,1,opt,name=unitName,proto3" json:"unitName,omitempty"`
}

func (x *SystemdStatusRequest) Reset() {
	*x = SystemdStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdStatusRequest) ProtoMessage() {}

func (x *SystemdStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdStatusRequest.ProtoReflect.Descriptor instead.
func (*SystemdStatusRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{5}
}

func (x *SystemdStatusRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

type SystemdStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *UnitStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SystemdStatusResponse) Reset() {
	*x = SystemdStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdStatusResponse) ProtoMessage() {}

func (x *SystemdStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdStatusResponse.ProtoReflect.Descriptor instead.
func (*SystemdStatusResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{6}
}

func (x *SystemdStatusResponse) GetStatus() *UnitStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type SystemdListStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemdListStatusRequest) Reset() {
	*x = SystemdListStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdListStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdListStatusRequest) ProtoMessage() {}

func (x *SystemdListStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdListStatusRequest.ProtoReflect.Descriptor instead.
func (*SystemdListStatusRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{7}
}

type SystemdListStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []*UnitStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *SystemdListStatusResponse) Reset() {
	*x = SystemdListStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdListStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdListStatusResponse) ProtoMessage() {}

func (x *SystemdListStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdListStatusResponse.ProtoReflect.Descriptor instead.
func (*SystemdListStatusResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{8}
}

func (x *SystemdListStatusResponse) GetStatuses() []*UnitStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type SystemdEnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName string `protobuf:"bytes,1,opt,name=unitName,proto3" json:"unitName,omitempty"`
	Runtime  bool   `protobuf:"varint,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Force    bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *SystemdEnableRequest) Reset() {
	*x = SystemdEnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdEnableRequest) ProtoMessage() {}

func (x *SystemdEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdEnableRequest.ProtoReflect.Descriptor instead.
func (*SystemdEnableRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{9}
}

func (x *SystemdEnableRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *SystemdEnableRequest) GetRuntime() bool {
	if x != nil {
		return x.Runtime
	}
	return false
}

func (x *SystemdEnableRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type SystemdEnableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HadEnablement bool              `protobuf:"varint,1,opt,name=hadEnablement,proto3" json:"hadEnablement,omitempty"`
	Changes       []*UnitFileChange `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *SystemdEnableResponse) Reset() {
	*x = SystemdEnableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdEnableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdEnableResponse) ProtoMessage() {}

func (x *SystemdEnableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdEnableResponse.ProtoReflect.Descriptor instead.
func (*SystemdEnableResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{10}
}

func (x *SystemdEnableResponse) GetHadEnablement() bool {
	if x != nil {
		return x.HadEnablement
	}
	return false
}

func (x *SystemdEnableResponse) GetChanges() []*UnitFileChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type SystemdDisableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName string `protobuf:"bytes,1,opt,name=unitName,proto3" json:"unitName,omitempty"`
	Runtime  bool   `protobuf:"varint,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
}

func (x *SystemdDisableRequest) Reset() {
	*x = SystemdDisableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdDisableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdDisableRequest) ProtoMessage() {}

func (x *SystemdDisableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdDisableRequest.ProtoReflect.Descriptor instead.
func (*SystemdDisableRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{11}
}

func (x *SystemdDisableRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *SystemdDisableRequest) GetRuntime() bool {
	if x != nil {
		return x.Runtime
	}
	return false
}

type SystemdDisableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*UnitFileChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *SystemdDisableResponse) Reset() {
	*x = SystemdDisableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdDisableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdDisableResponse) ProtoMessage() {}

func (x *SystemdDisableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdDisableResponse.ProtoReflect.Descriptor instead.
func (*SystemdDisableResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{12}
}

func (x *SystemdDisableResponse) GetChanges() []*UnitFileChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type SystemdStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName string `protobuf:"bytes,1,opt,name=unitName,proto3" json:"unitName,omitempty"`
	Mode     string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *SystemdStartRequest) Reset() {
	*x = SystemdStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdStartRequest) ProtoMessage() {}

func (x *SystemdStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdStartRequest.ProtoReflect.Descriptor instead.
func (*SystemdStartRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{13}
}

func (x *SystemdStartRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *SystemdStartRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type SystemdStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	JobID  int64  `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *SystemdStartResponse) Reset() {
	*x = SystemdStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdStartResponse) ProtoMessage() {}

func (x *SystemdStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdStartResponse.ProtoReflect.Descriptor instead.
func (*SystemdStartResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{14}
}

func (x *SystemdStartResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SystemdStartResponse) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

type SystemdStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName string `protobuf:"bytes,1,opt,name=unitName,proto3" json:"unitName,omitempty"`
	Mode     string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *SystemdStopRequest) Reset() {
	*x = SystemdStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdStopRequest) ProtoMessage() {}

func (x *SystemdStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdStopRequest.ProtoReflect.Descriptor instead.
func (*SystemdStopRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{15}
}

func (x *SystemdStopRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *SystemdStopRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type SystemdStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	JobID  int64  `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *SystemdStopResponse) Reset() {
	*x = SystemdStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdStopResponse) ProtoMessage() {}

func (x *SystemdStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdStopResponse.ProtoReflect.Descriptor instead.
func (*SystemdStopResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{16}
}

func (x *SystemdStopResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SystemdStopResponse) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

type SystemdRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName string `protobuf:"bytes,1,opt,name=unitName,proto3" json:"unitName,omitempty"`
	Mode     string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *SystemdRestartRequest) Reset() {
	*x = SystemdRestartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdRestartRequest) ProtoMessage() {}

func (x *SystemdRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdRestartRequest.ProtoReflect.Descriptor instead.
func (*SystemdRestartRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{17}
}

func (x *SystemdRestartRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *SystemdRestartRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type SystemdRestartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	JobID  int64  `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *SystemdRestartResponse) Reset() {
	*x = SystemdRestartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdRestartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdRestartResponse) ProtoMessage() {}

func (x *SystemdRestartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdRestartResponse.ProtoReflect.Descriptor instead.
func (*SystemdRestartResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{18}
}

func (x *SystemdRestartResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SystemdRestartResponse) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

type SystemdReloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName string `protobuf:"bytes,1,opt,name=unitName,proto3" json:"unitName,omitempty"`
	Mode     string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *SystemdReloadRequest) Reset() {
	*x = SystemdReloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdReloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdReloadRequest) ProtoMessage() {}

func (x *SystemdReloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdReloadRequest.ProtoReflect.Descriptor instead.
func (*SystemdReloadRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{19}
}

func (x *SystemdReloadRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *SystemdReloadRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type SystemdReloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	JobID  int64  `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *SystemdReloadResponse) Reset() {
	*x = SystemdReloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdReloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdReloadResponse) ProtoMessage() {}

func (x *SystemdReloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdReloadResponse.ProtoReflect.Descriptor instead.
func (*SystemdReloadResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{20}
}

func (x *SystemdReloadResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SystemdReloadResponse) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

type SystemdKillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName string `protobuf:"bytes,1,opt,name=unitName,proto3" json:"unitName,omitempty"`
	Signal   int32  `protobuf:"varint,2,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *SystemdKillRequest) Reset() {
	*x = SystemdKillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdKillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdKillRequest) ProtoMessage() {}

func (x *SystemdKillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdKillRequest.ProtoReflect.Descriptor instead.
func (*SystemdKillRequest) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{21}
}

func (x *SystemdKillRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *SystemdKillRequest) GetSignal() int32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

type SystemdKillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemdKillResponse) Reset() {
	*x = SystemdKillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdKillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdKillResponse) ProtoMessage() {}

func (x *SystemdKillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_systemd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdKillResponse.ProtoReflect.Descriptor instead.
func (*SystemdKillResponse) Descriptor() ([]byte, []int) {
	return file_systemd_proto_rawDescGZIP(), []int{22}
}

var File_systemd_proto protoreflect.FileDescriptor

var file_systemd_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x32, 0x0a, 0x08, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x98, 0x02,
	0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x22, 0x62, 0x0a, 0x0e, 0x55, 0x6e, 0x69, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x19, 0x0a, 0x17,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x18, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x32, 0x0a,
	0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x45, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x19, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x71, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x15, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x16, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x44,
	0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x22,
	0x47, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44,
	0x22, 0x46, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x64, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x22,
	0x48, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x83, 0x06, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x12, 0x52, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x07, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x64, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x64, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x04, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4b, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x6f, 0x64, 0x65, 0x76, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_systemd_proto_rawDescOnce sync.Once
	file_systemd_proto_rawDescData = file_systemd_proto_rawDesc
)

func file_systemd_proto_rawDescGZIP() []byte {
	file_systemd_proto_rawDescOnce.Do(func() {
		file_systemd_proto_rawDescData = protoimpl.X.CompressGZIP(file_systemd_proto_rawDescData)
	})
	return file_systemd_proto_rawDescData
}

var file_systemd_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_systemd_proto_goTypes = []interface{}{
	(*UnitFile)(nil),                  // 0: external.UnitFile
	(*UnitStatus)(nil),                // 1: external.UnitStatus
	(*UnitFileChange)(nil),            // 2: external.UnitFileChange
	(*SystemdListUnitsRequest)(nil),   // 3: external.SystemdListUnitsRequest
	(*SystemdListUnitsResponse)(nil),  // 4: external.SystemdListUnitsResponse
	(*SystemdStatusRequest)(nil),      // 5: external.SystemdStatusRequest
	(*SystemdStatusResponse)(nil),     // 6: external.SystemdStatusResponse
	(*SystemdListStatusRequest)(nil),  // 7: external.SystemdListStatusRequest
	(*SystemdListStatusResponse)(nil), // 8: external.SystemdListStatusResponse
	(*SystemdEnableRequest)(nil),      // 9: external.SystemdEnableRequest
	(*SystemdEnableResponse)(nil),     // 10: external.SystemdEnableResponse
	(*SystemdDisableRequest)(nil),     // 11: external.SystemdDisableRequest
	(*SystemdDisableResponse)(nil),    // 12: external.SystemdDisableResponse
	(*SystemdStartRequest)(nil),       // 13: external.SystemdStartRequest
	(*SystemdStartResponse)(nil),      // 14: external.SystemdStartResponse
	(*SystemdStopRequest)(nil),        // 15: external.SystemdStopRequest
	(*SystemdStopResponse)(nil),       // 16: external.SystemdStopResponse
	(*SystemdRestartRequest)(nil),     // 17: external.SystemdRestartRequest
	(*SystemdRestartResponse)(nil),    // 18: external.SystemdRestartResponse
	(*SystemdReloadRequest)(nil),      // 19: external.SystemdReloadRequest
	(*SystemdReloadResponse)(nil),     // 20: external.SystemdReloadResponse
	(*SystemdKillRequest)(nil),        // 21: external.SystemdKillRequest
	(*SystemdKillResponse)(nil),       // 22: external.SystemdKillResponse
}
var file_systemd_proto_depIdxs = []int32{
	0,  // 0: external.SystemdListUnitsResponse.units:type_name -> external.UnitFile
	1,  // 1: external.SystemdStatusResponse.status:type_name -> external.UnitStatus
	1,  // 2: external.SystemdListStatusResponse.statuses:type_name -> external.UnitStatus
	2,  // 3: external.SystemdEnableResponse.changes:type_name -> external.UnitFileChange
	2,  // 4: external.SystemdDisableResponse.changes:type_name -> external.UnitFileChange
	3,  // 5: external.Systemd.ListUnits:input_type -> external.SystemdListUnitsRequest
	5,  // 6: external.Systemd.Status:input_type -> external.SystemdStatusRequest
	7,  // 7: external.Systemd.ListStatus:input_type -> external.SystemdListStatusRequest
	9,  // 8: external.Systemd.Enable:input_type -> external.SystemdEnableRequest
	11, // 9: external.Systemd.Disable:input_type -> external.SystemdDisableRequest
	13, // 10: external.Systemd.Start:input_type -> external.SystemdStartRequest
	15, // 11: external.Systemd.Stop:input_type -> external.SystemdStopRequest
	17, // 12: external.Systemd.Restart:input_type -> external.SystemdRestartRequest
	19, // 13: external.Systemd.Reload:input_type -> external.SystemdReloadRequest
	21, // 14: external.Systemd.Kill:input_type -> external.SystemdKillRequest
	4,  // 15: external.Systemd.ListUnits:output_type -> external.SystemdListUnitsResponse
	6,  // 16: external.Systemd.Status:output_type -> external.SystemdStatusResponse
	8,  // 17: external.Systemd.ListStatus:output_type -> external.SystemdListStatusResponse
	10, // 18: external.Systemd.Enable:output_type -> external.SystemdEnableResponse
	12, // 19: external.Systemd.Disable:output_type -> external.SystemdDisableResponse
	14, // 20: external.Systemd.Start:output_type -> external.SystemdStartResponse
	16, // 21: external.Systemd.Stop:output_type -> external.SystemdStopResponse
	18, // 22: external.Systemd.Restart:output_type -> external.SystemdRestartResponse
	20, // 23: external.Systemd.Reload:output_type -> external.SystemdReloadResponse
	22, // 24: external.Systemd.Kill:output_type -> external.SystemdKillResponse
	15, // [15:25] is the sub-list for method output_type
	5,  // [5:15] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_systemd_proto_init() }
func file_systemd_proto_init() {
	if File_systemd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_systemd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitFileChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdListUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdListUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdListStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdListStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdEnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdEnableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdDisableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdDisableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdRestartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdRestartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdReloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdReloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdKillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdKillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_systemd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_systemd_proto_goTypes,
		DependencyIndexes: file_systemd_proto_depIdxs,
		MessageInfos:      file_systemd_proto_msgTypes,
	}.Build()
	File_systemd_proto = out.File
	file_systemd_proto_rawDesc = nil
	file_systemd_proto_goTypes = nil
	file_systemd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SystemdClient is the client API for Systemd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemdClient interface {
	ListUnits(ctx context.Context, in *SystemdListUnitsRequest, opts ...grpc.CallOption) (*SystemdListUnitsResponse, error)
	Status(ctx context.Context, in *SystemdStatusRequest, opts ...grpc.CallOption) (*SystemdStatusResponse, error)
	ListStatus(ctx context.Context, in *SystemdListStatusRequest, opts ...grpc.CallOption) (*SystemdListStatusResponse, error)
	Enable(ctx context.Context, in *SystemdEnableRequest, opts ...grpc.CallOption) (*SystemdEnableResponse, error)
	Disable(ctx context.Context, in *SystemdDisableRequest, opts ...grpc.CallOption) (*SystemdDisableResponse, error)
	Start(ctx context.Context, in *SystemdStartRequest, opts ...grpc.CallOption) (*SystemdStartResponse, error)
	Stop(ctx context.Context, in *SystemdStopRequest, opts ...grpc.CallOption) (*SystemdStopResponse, error)
	Restart(ctx context.Context, in *SystemdRestartRequest, opts ...grpc.CallOption) (*SystemdRestartResponse, error)
	Reload(ctx context.Context, in *SystemdReloadRequest, opts ...grpc.CallOption) (*SystemdReloadResponse, error)
	Kill(ctx context.Context, in *SystemdKillRequest, opts ...grpc.CallOption) (*SystemdKillResponse, error)
}

type systemdClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemdClient(cc grpc.ClientConnInterface) SystemdClient {
	return &systemdClient{cc}
}

func (c *systemdClient) ListUnits(ctx context.Context, in *SystemdListUnitsRequest, opts ...grpc.CallOption) (*SystemdListUnitsResponse, error) {
	out := new(SystemdListUnitsResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/ListUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemdClient) Status(ctx context.Context, in *SystemdStatusRequest, opts ...grpc.CallOption) (*SystemdStatusResponse, error) {
	out := new(SystemdStatusResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemdClient) ListStatus(ctx context.Context, in *SystemdListStatusRequest, opts ...grpc.CallOption) (*SystemdListStatusResponse, error) {
	out := new(SystemdListStatusResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/ListStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemdClient) Enable(ctx context.Context, in *SystemdEnableRequest, opts ...grpc.CallOption) (*SystemdEnableResponse, error) {
	out := new(SystemdEnableResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/Enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemdClient) Disable(ctx context.Context, in *SystemdDisableRequest, opts ...grpc.CallOption) (*SystemdDisableResponse, error) {
	out := new(SystemdDisableResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemdClient) Start(ctx context.Context, in *SystemdStartRequest, opts ...grpc.CallOption) (*SystemdStartResponse, error) {
	out := new(SystemdStartResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemdClient) Stop(ctx context.Context, in *SystemdStopRequest, opts ...grpc.CallOption) (*SystemdStopResponse, error) {
	out := new(SystemdStopResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemdClient) Restart(ctx context.Context, in *SystemdRestartRequest, opts ...grpc.CallOption) (*SystemdRestartResponse, error) {
	out := new(SystemdRestartResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemdClient) Reload(ctx context.Context, in *SystemdReloadRequest, opts ...grpc.CallOption) (*SystemdReloadResponse, error) {
	out := new(SystemdReloadResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemdClient) Kill(ctx context.Context, in *SystemdKillRequest, opts ...grpc.CallOption) (*SystemdKillResponse, error) {
	out := new(SystemdKillResponse)
	err := c.cc.Invoke(ctx, "/external.Systemd/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemdServer is the server API for Systemd service.
type SystemdServer interface {
	ListUnits(context.Context, *SystemdListUnitsRequest) (*SystemdListUnitsResponse, error)
	Status(context.Context, *SystemdStatusRequest) (*SystemdStatusResponse, error)
	ListStatus(context.Context, *SystemdListStatusRequest) (*SystemdListStatusResponse, error)
	Enable(context.Context, *SystemdEnableRequest) (*SystemdEnableResponse, error)
	Disable(context.Context, *SystemdDisableRequest) (*SystemdDisableResponse, error)
	Start(context.Context, *SystemdStartRequest) (*SystemdStartResponse, error)
	Stop(context.Context, *SystemdStopRequest) (*SystemdStopResponse, error)
	Restart(context.Context, *SystemdRestartRequest) (*SystemdRestartResponse, error)
	Reload(context.Context, *SystemdReloadRequest) (*SystemdReloadResponse, error)
	Kill(context.Context, *SystemdKillRequest) (*SystemdKillResponse, error)
}

// UnimplementedSystemdServer can be embedded to have forward compatible implementations.
type UnimplementedSystemdServer struct {
}

func (*UnimplementedSystemdServer) ListUnits(context.Context, *SystemdListUnitsRequest) (*SystemdListUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnits not implemented")
}
func (*UnimplementedSystemdServer) Status(context.Context, *SystemdStatusRequest) (*SystemdStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedSystemdServer) ListStatus(context.Context, *SystemdListStatusRequest) (*SystemdListStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatus not implemented")
}
func (*UnimplementedSystemdServer) Enable(context.Context, *SystemdEnableRequest) (*SystemdEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (*UnimplementedSystemdServer) Disable(context.Context, *SystemdDisableRequest) (*SystemdDisableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (*UnimplementedSystemdServer) Start(context.Context, *SystemdStartRequest) (*SystemdStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedSystemdServer) Stop(context.Context, *SystemdStopRequest) (*SystemdStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedSystemdServer) Restart(context.Context, *SystemdRestartRequest) (*SystemdRestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (*UnimplementedSystemdServer) Reload(context.Context, *SystemdReloadRequest) (*SystemdReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (*UnimplementedSystemdServer) Kill(context.Context, *SystemdKillRequest) (*SystemdKillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}

func RegisterSystemdServer(s *grpc.Server, srv SystemdServer) {
	s.RegisterService(&_Systemd_serviceDesc, srv)
}

func _Systemd_ListUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdListUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).ListUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/ListUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).ListUnits(ctx, req.(*SystemdListUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemd_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).Status(ctx, req.(*SystemdStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemd_ListStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdListStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).ListStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/ListStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).ListStatus(ctx, req.(*SystemdListStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemd_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdEnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).Enable(ctx, req.(*SystemdEnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemd_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).Disable(ctx, req.(*SystemdDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemd_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).Start(ctx, req.(*SystemdStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemd_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).Stop(ctx, req.(*SystemdStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemd_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).Restart(ctx, req.(*SystemdRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemd_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).Reload(ctx, req.(*SystemdReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemd_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemdKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemdServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Systemd/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemdServer).Kill(ctx, req.(*SystemdKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Systemd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "external.Systemd",
	HandlerType: (*SystemdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUnits",
			Handler:    _Systemd_ListUnits_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Systemd_Status_Handler,
		},
		{
			MethodName: "ListStatus",
			Handler:    _Systemd_ListStatus_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _Systemd_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _Systemd_Disable_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Systemd_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Systemd_Stop_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Systemd_Restart_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _Systemd_Reload_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Systemd_Kill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "systemd.proto",
}
